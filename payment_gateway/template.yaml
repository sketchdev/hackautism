AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    LifeBinder Payment Gateway API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Runtime: nodejs8.10
        Timeout: 30
        Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
            Variables:
                NODE_ENV: !Ref StageNameParam
                AWS_DEPLOYED_REGION: !Ref "AWS::Region"
                PAYMENT_GATEWAY_TABLE: !Sub "lbpaymentgateway${StageNameParam}"
                PAYMENT_PROCESSOR_KEY: !Ref ProcessorApiKeyParam
        Tags:
            Application: LifeBinder
            Purpose: PaymentGateway

Parameters:
    StageNameParam:
        Type: String
        Default: qa
        Description: API Gateway stage to deploy to
    ProcessorApiKeyParam:
        Type: String
        Description: Secret Key for the payment processor API

Resources:

    LifeBinderSamFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Description: LifeBinder Payment Gateway API Controller
            CodeUri: ./
            Handler: lambda.handler
            Policies:
              - AWSLambdaBasicExecutionRole
              - !Ref LifeBinderLambdaManagedPolicy
            Events:
                ApiProxy:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /{proxy+}
                        Method: ANY
                        RestApiId: !Ref ApiGatewayApi

    LifeBinderLambdaManagedPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            Description: Allows the application to access the LifeBinder DynamoDB table
            Path: "/application/"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: "DynamoDBAccess"
                        Effect: "Allow"
                        Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:BatchWriteItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:UpdateItem"
                        Resource: !GetAtt LifeBinderDynamoDB.Arn
            ManagedPolicyName: !Sub "LifeBinderPaymentGateway-${AWS::StackName}"

    LifeBinderDynamoDB:
      Type: AWS::Serverless::SimpleTable
      Properties:
        TableName: !Sub "lbpaymentgateway${StageNameParam}"
        PrimaryKey:
          Name: username
          Type: String
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        Tags:
          Application: LifeBinder
          Purpose: PaymentGateway
        SSESpecification:
          SSEEnabled: true

    ApiGatewayApi:
        Type: AWS::Serverless::Api
        Properties:
          StageName: !Ref StageNameParam
          DefinitionBody:
              swagger: "2.0"
              info:
                version: "2018-07-17T17:04:10Z"
                title:
                  Fn::Sub: "LBPaymentGateway${StageNameParam}"
              schemes:
              - "https"
              paths:
                /{proxy+}:
                  x-amazon-apigateway-any-method:
                    produces:
                    - "application/json"
                    parameters:
                    - name: "proxy"
                      in: "path"
                      required: true
                      type: "string"
                    responses: {}
                    x-amazon-apigateway-integration:
                      uri:
                        Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LifeBinderSamFunction.Arn}/invocations"
                      responses:
                        default:
                          statusCode: "200"
                      passthroughBehavior: "when_no_match"
                      httpMethod: "POST"
                      cacheKeyParameters:
                      - "method.request.path.proxy"
                      contentHandling: "CONVERT_TO_TEXT"
                      type: "aws_proxy"
